{"version":3,"file":"components-Buttons-FilledButton-RoundedButton-stories.4a0735b6.iframe.bundle.js","mappings":";;;;;;;;;;AAYA;;ACiBA;AAIA;AAYA","sources":["webpack://my-react-ui-kit/./src/shared-data-for-styles/TAB-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/components/Buttons/FilledButton/RoundedButton.tsx"],"sourcesContent":["import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_TAB_reactionOptions {\r\n\tzoom: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const TAB_reactionOptions: I_TAB_reactionOptions = {\r\n\tzoom: css`\r\n\t\toutline: none;\r\n\t\ttransform: scale(1.1);\r\n\t`,\r\n\tnone: css`\r\n\t\toutline: none;\r\n\t`,\r\n}\r\n","import React, { InputHTMLAttributes } from \"react\"\r\nimport { memo, FC } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport ResetCss from \"../../../reset.js\"\r\nimport buttonKinds from \"./RoundedButton.module.scss\"\r\nimport {\r\n\tI_TAB_reactionOptions,\r\n\tTAB_reactionOptions,\r\n} from \"../../../shared-data-for-styles/TAB-on-element/reaction-options\"\r\n// import {\r\n// \tI_hover_reactionOptions,\r\n// \thover_reactionOptions,\r\n// } from \"../../../shared-data-for-styles/hover-on-element/reaction-options\"\r\n\r\ninterface SpeciaStyles {\r\n\tthemeColor?: string\r\n\tkind?: keyof typeof buttonKinds\r\n\tTAB_reaction?: keyof I_TAB_reactionOptions\r\n}\r\n\r\nexport interface RoundedButtonProps\r\n\textends InputHTMLAttributes<HTMLInputElement>,\r\n\t\tSpeciaStyles {\r\n\tvalue: string\r\n\twidth?: number\r\n\theight?: number\r\n}\r\n\r\nconst Button = styled.input.withConfig({\r\n\tshouldForwardProp: (prop) =>\r\n\t\t![\"themeColor\", \"kind\", \"TAB_reaction\", \"width\"].includes(prop),\r\n})<RoundedButtonProps>`\r\n\t${(props) => `\r\n\t\t--theme-color: ${props?.themeColor ?? \"black\"};\r\n\t\tcursor: pointer;\r\n\t\twidth: ${props?.width ?? 6}em;\r\n\t\theight: ${props?.height ?? 2.5}em;\r\n\t\tfont-size: ${props?.width ? props.width / 6 + \"em\" : \"17px\"};\r\n\t\tborder-radius: ${props?.width ? props.width / 2 : 4}em;\r\n\t\t&:focus-visible {\r\n\t\t\t${TAB_reactionOptions[props?.TAB_reaction ?? \"none\"]};\r\n\t\t}`}\r\n`\r\n\r\nconst RoundedButton: FC<RoundedButtonProps> = memo((props) => {\r\n\tconst classes = [\r\n\t\tprops?.className ?? \"\",\r\n\t\tprops?.kind ? buttonKinds[props.kind] : buttonKinds[\"none\"],\r\n\t].join(\" \")\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ResetCss />\r\n\t\t\t<Button {...props} className={classes} type=\"button\" />\r\n\t\t</>\r\n\t)\r\n})\r\n\r\nexport default RoundedButton\r\n"],"names":[],"sourceRoot":""}