{"version":3,"file":"components-Buttons-OnePiece-index-stories.8fab1753.iframe.bundle.js","mappings":";;;AAYA;;ACJA;;AAIA;;AAGA;ACFA;AAQA;ACuBA;AAiBA","sources":["webpack://my-react-ui-kit/./src/shared-data-for-styles/TAB-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/hover-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/loading-icons/Spinner/Spinner.tsx","webpack://my-react-ui-kit/./src/components/Buttons/OnePiece/index.tsx"],"sourcesContent":["import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_TAB_reactionOptions {\r\n\tzoom: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const TAB_reactionOptions: I_TAB_reactionOptions = {\r\n\tzoom: css`\r\n\t\toutline: none;\r\n\t\ttransform: scale(1.1);\r\n\t`,\r\n\tnone: css`\r\n\t\toutline: none;\r\n\t`,\r\n}\r\n","import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_hover_reactionOptions {\r\n\tblackout: Interpolation<Record<never, never>>\r\n\tlightening: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const hover_reactionOptions: I_hover_reactionOptions = {\r\n\tblackout: css`\r\n\t\tfilter: brightness(0.96);\r\n\t`,\r\n\tlightening: css`\r\n\t\tfilter: brightness(1.1);\r\n\t`,\r\n\tnone: css``,\r\n}\r\n","import React, { FC, HTMLAttributes } from \"react\"\r\nimport { ImSpinner6 } from \"react-icons/im\"\r\n\r\nimport styles from \"./spinner.module.css\"\r\nimport styled from \"styled-components\"\r\n\r\nexport interface SpinnerProps extends HTMLAttributes<SVGAngle> {\r\n\tcolor: string\r\n}\r\n\r\nconst StyledSpinner = styled(ImSpinner6).withConfig({\r\n\tshouldForwardProp: (prop) => true,\r\n})<SpinnerProps>`\r\n\t${({ color }) => `\r\n\tposition: absolute;\r\n\tfont-size: inherit;\r\n\ttop: calc(50% - 0.5em);\r\n\tcolor: ${color};\r\n`}\r\n`\r\n\r\nconst Spinner: FC<SpinnerProps> = (props) => {\r\n\treturn <StyledSpinner {...props} className={styles.rotate} />\r\n}\r\n\r\nexport default Spinner\r\n","import React, { ButtonHTMLAttributes } from \"react\"\r\nimport { memo, FC } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport ResetCss from \"../../../reset.js\"\r\nimport buttonKinds from \"./index.module.scss\" \r\nimport {\r\n\tI_TAB_reactionOptions,\r\n\tTAB_reactionOptions,\r\n} from \"../../../shared-data-for-styles/TAB-on-element/reaction-options\"\r\nimport {\r\n\tI_hover_reactionOptions,\r\n\thover_reactionOptions,\r\n} from \"../../../shared-data-for-styles/hover-on-element/reaction-options\"\r\nimport {\r\n\tIRoundingOptions,\r\n\troundingOptions,\r\n} from \"../../../shared-data-for-styles/element-rounding\"\r\nimport loadingIcons, {\r\n\tILoadingIcons,\r\n} from \"../../../shared-data-for-styles/loading-icons\"\r\n\r\ninterface SpeciaStyles {\r\n\tthemeColor?: string\r\n\tkind?: \"ghost\" | \"filled\" | \"filling\" | \"ghost-filling\" | \"none\"\r\n\tTAB_reaction?: keyof I_TAB_reactionOptions\r\n\thover_reaction?: keyof I_hover_reactionOptions\r\n\trounding?: keyof IRoundingOptions\r\n\twidth?: number\r\n\theight?: number\r\n\tisLoading?: boolean\r\n\tloadingKind?: keyof ILoadingIcons\r\n\tloadingIconColor?: string\r\n}\r\n\r\nexport interface OnePieceButtonProps\r\n\textends ButtonHTMLAttributes<HTMLButtonElement>,\r\n\t\tSpeciaStyles {\r\n\ttext: string\r\n}\r\n\r\nconst Button = styled.button.withConfig({\r\n\tshouldForwardProp: (prop) => prop === \"children\",\r\n})<SpeciaStyles>`\r\n\t${(props) => `\r\n\t\tposition: relative;\r\n\t\t--theme-color: ${props?.themeColor ?? \"black\"};\r\n\t\twidth: ${props?.width ?? 7}em;\r\n\t\theight: ${props?.height ?? 3}em;\r\n\t\tfont-size: ${props?.height ? props.height / 2.4 : 1.1}em;\r\n\t\tborder-radius: ${props?.height && props?.rounding ? props.height * roundingOptions[props.rounding] : 0}em;\r\n\r\n\t\t&:hover {\r\n\t\t\t${hover_reactionOptions[props?.hover_reaction ?? \"none\"]}\r\n\t\t}\r\n\r\n\t\t&:focus-visible {\r\n\t\t\t${TAB_reactionOptions[props?.TAB_reaction ?? \"none\"]};\r\n\t\t}`}\r\n`\r\n\r\nconst OnePieceButton: FC<OnePieceButtonProps> = memo(({ text, ...props }) => {\r\n\tconst classes = [\r\n\t\tprops?.className ?? \"\",\r\n\t\tbuttonKinds[props?.kind ?? \"none\"],\r\n\t].join(\" \")\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ResetCss />\r\n\t\t\t<Button {...props} className={classes}>\r\n\t\t\t\t{text}\r\n\t\t\t\t{\" \\u200B\"}\r\n\t\t\t\t{props?.isLoading\r\n\t\t\t\t\t? loadingIcons[props?.loadingKind ?? \"none\"]({\r\n\t\t\t\t\t\t\tcolor: props?.loadingIconColor ?? \"black\",\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: \"\"}\r\n\t\t\t</Button>\r\n\t\t</>\r\n\t)\r\n})\r\n\r\nexport default OnePieceButton\r\n"],"names":[],"sourceRoot":""}