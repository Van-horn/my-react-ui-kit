{"version":3,"file":"components-Buttons-OnePiece-index-stories.bef260b0.iframe.bundle.js","mappings":";;;AAYA;;AAKA;;ACLA;;AAGA;;ACLA;ACsCA;AAwBA","sources":["webpack://my-react-ui-kit/./src/shared-data-for-styles/TAB-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/hover-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/loading-icons/Spinner/index.tsx","webpack://my-react-ui-kit/./src/components/Buttons/OnePiece/index.tsx"],"sourcesContent":["import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_TAB_reactionOptions {\r\n\tzoom: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const TAB_reactionOptions: I_TAB_reactionOptions = {\r\n\tzoom: css`\r\n\t\toutline: none;\r\n\t\ttransform: scale(1.1);\r\n\t`,\r\n\tnone: css`\r\n\t\toutline: none;\r\n\t`,\r\n}\r\n\r\nexport const TAB_reactionOptionsKeys = Object.keys(TAB_reactionOptions)\r\n","import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_hover_reactionOptions {\r\n\tblackout: Interpolation<Record<never, never>>\r\n\tlightening: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const hover_reactionOptions: I_hover_reactionOptions = {\r\n\tblackout: css`\r\n\t\tfilter: brightness(0.96);\r\n\t`,\r\n\tlightening: css`\r\n\t\tfilter: brightness(1.1);\r\n\t`,\r\n\tnone: css``,\r\n}\r\n\r\nexport const hover_reactionOptionsKeys = Object.keys(hover_reactionOptions)\r\n","import React, { FC } from \"react\"\r\nimport { ImSpinner6 } from \"react-icons/im\"\r\nimport styled from \"styled-components\"\r\n\r\nimport styles from \"./spinner.module.css\"\r\n\r\nconst StyledSpinner = styled(ImSpinner6)<Record<never,never>>`\r\n\tmargin-left: 0.25em;\r\n`\r\n\r\nconst Spinner: FC = () => {\r\n\treturn <StyledSpinner className={styles.rotate} />\r\n}\r\n\r\nexport default Spinner\r\n","import React, { ButtonHTMLAttributes } from \"react\"\r\nimport { memo, FC } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport ResetCss from \"../../../reset\"\r\nimport buttonKinds from \"./index.module.scss\"\r\nimport {\r\n\tI_TAB_reactionOptions,\r\n\tTAB_reactionOptions,\r\n} from \"../../../shared-data-for-styles/TAB-on-element/reaction-options\"\r\nimport {\r\n\tI_hover_reactionOptions,\r\n\thover_reactionOptions,\r\n} from \"../../../shared-data-for-styles/hover-on-element/reaction-options\"\r\nimport {\r\n\tIRoundingOptions,\r\n\troundingOptions,\r\n} from \"../../../shared-data-for-styles/element-rounding\"\r\nimport loadingIcons, {\r\n\tILoadingIcons,\r\n} from \"../../../shared-data-for-styles/loading-icons\"\r\nimport overrideObjProps from \"../../../utils/overrideObjProps\"\r\n\r\ninterface SpeciaStyles {\r\n\tcolor: string\r\n\tinitColor: string\r\n\tbgcolor: string\r\n\tinitBgcolor: string\r\n\tkind: keyof typeof buttonKinds\r\n\twidth: number\r\n\theight: number\r\n\trounding: keyof IRoundingOptions\r\n\tisLoading: boolean\r\n\tloadingKind: keyof ILoadingIcons\r\n\tloadingIconColor: string\r\n\tTAB_reaction: keyof I_TAB_reactionOptions\r\n\thover_reaction: keyof I_hover_reactionOptions\r\n}\r\n\r\nexport interface OnePieceButtonProps\r\nextends ButtonHTMLAttributes<HTMLButtonElement>,\r\nPartial<SpeciaStyles> {\r\n\ttext: string\r\n}\r\n\r\nconst Button = styled.button.withConfig({\r\n\tshouldForwardProp: (prop) => prop === \"children\",\r\n})<SpeciaStyles>`\r\n\t${({color,initColor,bgcolor,initBgcolor,width,height,rounding,TAB_reaction,hover_reaction}) => `\r\n\t\t--initColor : ${initColor};\r\n\t\t--color : ${color};\r\n\t\t--bgcolor : ${bgcolor};\r\n\t\t--initBgcolor : ${initBgcolor};\r\n\t\t\r\n\t\tdisplay: flex;\r\n  \t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tborder-width: 0.15em; \r\n\t\twidth: ${width}em;\r\n\t\theight: ${height}em;\r\n\t\tfont-size: ${height / 2.5}em;\r\n\t\tborder-radius: ${height * roundingOptions[rounding]}em;\r\n\r\n\t\t&:hover {\r\n\t\t\t${hover_reactionOptions[hover_reaction]}\r\n\t\t}\r\n\r\n\t\t&:focus-visible {\r\n\t\t\t${TAB_reactionOptions[TAB_reaction]};\r\n\t\t}`}\r\n`\r\n\r\nconst initProps: SpeciaStyles = {\r\n\tcolor : \"black\",\r\n\tinitColor: \"black\",\r\n\tbgcolor: \"rgb(235, 235, 235)\",\r\n\tinitBgcolor: \"rgb(235, 235, 235)\",\r\n\twidth: 6.5,\r\n\theight: 2.5,\r\n\tkind:\"none\",\r\n\tloadingKind :\"none\",\r\n\trounding : \"none\",\r\n\tisLoading: false,\r\n\tloadingIconColor:  \"black\",\r\n\tTAB_reaction: \"none\",\r\n\thover_reaction: \"none\"\r\n}\r\n\r\nconst OnePieceButton: FC<OnePieceButtonProps> = memo(({text, ...props}) => {\r\n\tconst classes = [\r\n\t\tprops?.className ?? \"\",\r\n\t\tbuttonKinds[props?.kind ?? initProps.kind],\r\n\t].join(\" \")\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ResetCss />\r\n\t\t\t<Button {...overrideObjProps<SpeciaStyles, Partial<SpeciaStyles>>(initProps, props)} className={classes}>\r\n\t\t\t\t{text}\r\n\t\t\t\t{props?.isLoading && props?.loadingKind ? loadingIcons[props.loadingKind]: loadingIcons[initProps.loadingKind]}\r\n\t\t\t</Button>\r\n\t\t</>\r\n\t)\r\n})\r\n\r\nexport const buttons = Object.keys(buttonKinds)\r\nexport default OnePieceButton\r\n"],"names":[],"sourceRoot":""}