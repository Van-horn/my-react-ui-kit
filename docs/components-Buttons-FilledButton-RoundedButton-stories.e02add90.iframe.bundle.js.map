{"version":3,"file":"components-Buttons-FilledButton-RoundedButton-stories.e02add90.iframe.bundle.js","mappings":";;;AAYA;;ACLA;;AAIA;ACsBA;AAeA","sources":["webpack://my-react-ui-kit/./src/shared-data-for-styles/TAB-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/hover-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/components/Buttons/FilledButton/RoundedButton.tsx"],"sourcesContent":["import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_TAB_reactionOptions {\r\n\tzoom: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const TAB_reactionOptions: I_TAB_reactionOptions = {\r\n\tzoom: css`\r\n\t\toutline: none;\r\n\t\ttransform: scale(1.1);\r\n\t`,\r\n\tnone: css`\r\n\t\toutline: none;\r\n\t`,\r\n}\r\n","import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_hover_reactionOptions {\r\n\tblackout: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const hover_reactionOptions: I_hover_reactionOptions = {\r\n\tblackout: css`\r\n\t\t// filter: background-color: rgba(0, 0, 0, 0.01);\r\n\t`,\r\n\tnone: css``,\r\n}\r\n","import React from \"react\"\r\nimport { ButtonHTMLAttributes, memo, FC, CSSProperties } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nimport buttonKinds from \"./RoundedButton.module.scss\"\r\nimport {\r\n\tI_TAB_reactionOptions,\r\n\tTAB_reactionOptions,\r\n} from \"../../../shared-data-for-styles/TAB-on-element/reaction-options\"\r\nimport {\r\n\tI_hover_reactionOptions,\r\n\thover_reactionOptions,\r\n} from \"../../../shared-data-for-styles/hover-on-element/reaction-options\"\r\n\r\ninterface speciaStyles {\r\n\thover_reaction?: keyof I_hover_reactionOptions\r\n\tTAB_reaction?: keyof I_TAB_reactionOptions\r\n}\r\n\r\nexport interface FilledButtonProps\r\n\textends ButtonHTMLAttributes<HTMLButtonElement>,\r\n\t\tspeciaStyles {\r\n\tlabel: string\r\n\tbackgroundColor?: string\r\n\ttextColor?: string\r\n\tkind?: keyof typeof buttonKinds\r\n}\r\n\r\nconst Button = styled.button.withConfig({\r\n\tshouldForwardProp: (prop) =>\r\n\t\tprop !== \"label\" ||\r\n\t\tprop in ({} as ButtonHTMLAttributes<HTMLButtonElement>),\r\n})<FilledButtonProps>`\r\n\t${(props) => `\r\n\tcursor: pointer;\r\n\r\n\r\n\tcolor: ${props?.textColor ?? \"initial\"}\r\n\tbackground-color: ${props?.backgroundColor ?? \"initial\"}\r\n\r\n\t&:hover {\r\n\t\t${hover_reactionOptions[props?.hover_reaction ?? \"none\"]}\r\n\t}\r\n\t&:focus-visible {\r\n\t\t${TAB_reactionOptions[props?.TAB_reaction ?? \"none\"]}\r\n\t}`}\r\n`\r\n\r\nconst FilledButton: FC<FilledButtonProps> = (props) => {\r\n\tconst classes = [\r\n\t\tprops?.className ?? \"\",\r\n\t\tprops?.kind ? buttonKinds[props.kind] : \"\",\r\n\t].join(\" \")\r\n\treturn (\r\n\t\t<Button {...props} className={classes}>\r\n\t\t\t{props.label}\r\n\t\t</Button>\r\n\t)\r\n}\r\n\r\nexport default memo(FilledButton)\r\n"],"names":[],"sourceRoot":""}