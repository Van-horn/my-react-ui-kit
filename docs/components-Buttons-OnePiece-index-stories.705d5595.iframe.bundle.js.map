{"version":3,"file":"components-Buttons-OnePiece-index-stories.705d5595.iframe.bundle.js","mappings":";;;AAYA;;AAKA;;ACLA;;AAGA;;ACLA;ACsCA;AAkCA","sources":["webpack://my-react-ui-kit/./src/shared-data-for-styles/TAB-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/hover-on-element/reaction-options.ts","webpack://my-react-ui-kit/./src/shared-data-for-styles/loading-icons/Spinner/index.tsx","webpack://my-react-ui-kit/./src/components/Buttons/OnePiece/index.tsx"],"sourcesContent":["import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_TAB_reactionOptions {\r\n\tzoom: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const TAB_reactionOptions: I_TAB_reactionOptions = {\r\n\tzoom: css`\r\n\t\toutline: none;\r\n\t\ttransform: scale(1.1);\r\n\t`,\r\n\tnone: css`\r\n\t\toutline: none;\r\n\t`,\r\n}\r\n\r\nexport const TAB_reactionOptionsKeys = Object.keys(TAB_reactionOptions)\r\n","import { css, Interpolation } from \"styled-components\"\r\n\r\nexport interface I_hover_reactionOptions {\r\n\tblackout: Interpolation<Record<never, never>>\r\n\tlightening: Interpolation<Record<never, never>>\r\n\tnone: Interpolation<Record<never, never>>\r\n}\r\n\r\nexport const hover_reactionOptions: I_hover_reactionOptions = {\r\n\tblackout: css`\r\n\t\tfilter: brightness(0.96);\r\n\t`,\r\n\tlightening: css`\r\n\t\tfilter: brightness(1.1);\r\n\t`,\r\n\tnone: css``,\r\n}\r\n\r\nexport const hover_reactionOptionsKeys = Object.keys(hover_reactionOptions)\r\n","import React, { FC } from \"react\"\r\nimport { ImSpinner6 } from \"react-icons/im\"\r\nimport styled from \"styled-components\"\r\n\r\nimport styles from \"./spinner.module.css\"\r\n\r\nconst StyledSpinner = styled(ImSpinner6)<Record<never,never>>`\r\n\tmargin-left: 0.25em;\r\n`\r\n\r\nconst Spinner: FC = () => {\r\n\treturn <StyledSpinner className={styles.rotate} />\r\n}\r\n\r\nexport default Spinner\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport { memo, FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport ResetCss from \"../../../reset\";\r\nimport buttonKinds from \"./index.module.scss\";\r\nimport {\r\n   I_TAB_reactionOptions,\r\n   TAB_reactionOptions,\r\n} from \"../../../shared-data-for-styles/TAB-on-element/reaction-options\";\r\nimport {\r\n   I_hover_reactionOptions,\r\n   hover_reactionOptions,\r\n} from \"../../../shared-data-for-styles/hover-on-element/reaction-options\";\r\nimport {\r\n   IRoundingOptions,\r\n   roundingOptions,\r\n} from \"../../../shared-data-for-styles/element-rounding\";\r\nimport loadingIcons, {\r\n   ILoadingIcons,\r\n} from \"../../../shared-data-for-styles/loading-icons\";\r\nimport overrideObjProps from \"../../../utils/overrideObjProps\";\r\n\r\ninterface SpeciaStyles {\r\n   color: string;\r\n   initColor: string;\r\n   bgcolor: string;\r\n   initBgcolor: string;\r\n   kind: keyof typeof buttonKinds;\r\n   width: number;\r\n   height: number;\r\n   rounding: keyof IRoundingOptions;\r\n   isLoading: boolean;\r\n   loadingKind: keyof ILoadingIcons;\r\n   loadingIconColor: string;\r\n   TAB_reaction: keyof I_TAB_reactionOptions;\r\n   hover_reaction: keyof I_hover_reactionOptions;\r\n}\r\n\r\nexport interface OnePieceButtonProps\r\n   extends ButtonHTMLAttributes<HTMLButtonElement>,\r\n      Partial<SpeciaStyles> {\r\n   text: string;\r\n}\r\n\r\nconst Button = styled.button.withConfig({\r\n   shouldForwardProp: (prop) => prop === \"children\",\r\n})<SpeciaStyles>`\r\n   ${({\r\n      color,\r\n      initColor,\r\n      bgcolor,\r\n      initBgcolor,\r\n      width,\r\n      height,\r\n      rounding,\r\n      TAB_reaction,\r\n      hover_reaction,\r\n   }) => `\r\n\t\t--initColor : ${initColor};\r\n\t\t--color : ${color};\r\n\t\t--bgcolor : ${bgcolor};\r\n\t\t--initBgcolor : ${initBgcolor};\r\n\t\t\r\n\t\tdisplay: flex;\r\n  \t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tborder-width: 0.15em; \r\n\t\twidth: ${width}em;\r\n\t\theight: ${height}em;\r\n\t\tfont-size: ${height / 2.5}em;\r\n\t\tborder-radius: ${height * roundingOptions[rounding]}em;\r\n\r\n\t\t&:hover {\r\n\t\t\t${hover_reactionOptions[hover_reaction]}\r\n\t\t}\r\n\r\n\t\t&:focus-visible {\r\n\t\t\t${TAB_reactionOptions[TAB_reaction]};\r\n\t\t}`}\r\n`;\r\n\r\nexport const initProps: SpeciaStyles = {\r\n   color: \"black\",\r\n   initColor: \"black\",\r\n   bgcolor: \"rgb(235, 235, 235)\",\r\n   initBgcolor: \"rgb(235, 235, 235)\",\r\n   width: 6.5,\r\n   height: 2.5,\r\n   kind: \"none\",\r\n   loadingKind: \"none\",\r\n   rounding: \"none\",\r\n   isLoading: false,\r\n   loadingIconColor: \"black\",\r\n   TAB_reaction: \"none\",\r\n   hover_reaction: \"none\",\r\n};\r\n\r\nconst OnePieceButton: FC<OnePieceButtonProps> = memo(({ text, ...props }) => {\r\n   const classes = [\r\n      props?.className ?? \"\",\r\n      buttonKinds[props?.kind ?? initProps.kind],\r\n   ].join(\" \");\r\n\r\n   return (\r\n      <>\r\n         <ResetCss />\r\n         <Button\r\n            {...overrideObjProps<SpeciaStyles, Partial<SpeciaStyles>>(\r\n               initProps,\r\n               props,\r\n            )}\r\n            className={classes}\r\n         >\r\n            {text}\r\n            {props?.isLoading && props?.loadingKind\r\n               ? loadingIcons[props.loadingKind]\r\n               : loadingIcons[initProps.loadingKind]}\r\n         </Button>\r\n      </>\r\n   );\r\n});\r\n\r\nexport const buttons = Object.keys(buttonKinds);\r\nexport default OnePieceButton;\r\n"],"names":[],"sourceRoot":""}